<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/util
			http://www.springframework.org/schema/util/spring-util-3.2.xsd
			http://www.springframework.org/schema/task
			http://www.springframework.org/schema/task/spring-task-3.2.xsd"
			>
	<mvc:annotation-driven />
	<!-- 引入jdbc配置文件 -->
	<mvc:default-servlet-handler />
	<context:property-placeholder location="classpath:*.properties" file-encoding="UTF-8" local-override="true"/>
	<!-- redis 配置 -->
	<bean id="jedisCache" class="com.tp.wb.common.cache.JedisCache">
		<constructor-arg>
			<bean class="com.tp.wb.common.config.JedisConfig">
				<property name="host" value="${redis.host}"/>
				<property name="port" value="${redis.port}"/>
				<property name="timeout" value="${redis.timeout}"/>
				<property name="maxTotal" value="${redis.maxActive}"/>
				<property name="maxIdle" value="${redis.maxIdle}"/>
				<property name="password" value="${redis.password}"/>
			</bean>
		</constructor-arg>
	</bean>

	<!-- 微信参数配置 -->
	<bean id="wechatConfig" class="com.tp.wb.common.config.WechatConfig">
		<property name="appID" value="${wechat.appID}"/>
		<property name="appSecret" value="${wechat.appSecret}"/>
		<property name="token" value="${wechat.token}"/>
	</bean>

	<bean class="com.tp.wb.timertask.AccessTokenManager">
		<constructor-arg index="0" ref="wechatConfig" />
		<constructor-arg index="1" ref="jedisCache" />
	</bean>

	<!-- 扫描文件（自动将非controller层注入） -->
	<context:component-scan base-package="com.tp.wb.service" />
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${c3p0.driverClass}" />
		<property name="jdbcUrl" value="${c3p0.url}" />
		<property name="user" value="${c3p0.user}" />
		<property name="password" value="${c3p0.password}" />
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
		<property name="testConnectionOnCheckin" value="true" /> 
		<property name="testConnectionOnCheckout" value="true" /> 
		<property name="idleConnectionTestPeriod" value="18000" />
	</bean>
	<!-- mybatis文件配置，扫描所有mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- basePackage指定要扫描的包，在此包下的映射器都会被搜索到。可指定多个包，包与包之间用逗号或分号分隔 -->
		<property name="basePackage" value="com.tp.wb.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 对数据源进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 哪些类哪些方法使用事务 -->
	<aop:config>
		<!-- 对service中的所有类中的方法进行扫描 -->
		<aop:pointcut id="allServiceMethod"
			expression="execution(* com.tp.wb.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allServiceMethod" />
	</aop:config>

	<!-- 事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<task:annotation-driven/>
	<!--<mvc:interceptors>
		<mvc:interceptor>
			&lt;!&ndash; 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller &ndash;&gt;
			<mvc:mapping path="/**" />
			<bean class="com.tt.server.api.common.interceptor.LogInterceptor"></bean>
		</mvc:interceptor>
		&lt;!&ndash; 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 &ndash;&gt;
	</mvc:interceptors>-->

</beans>